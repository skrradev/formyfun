1) db
2) security
3) controllers, services, repositories
4) front end
5) mobile
6) indexes


https://stackoverflow.com/questions/1260878/mysql-structure-for-comments-and-comment-replies


4
down vote
If you want people to be able to reply to the replies (i.e. have a hierarchy of replies such as you would see in, say, an online message forum), then I would add an optional parent_comment_id field to the comments table.

Your table would look like this

`CREATE TABLE IF NOT EXISTS `comments` (
  `id` int(12) NOT NULL AUTO_INCREMENT,
  `parent_comment_id` int(12) NULL,
  `comment` text,
  `user_id` int(12) DEFAULT NULL,
  `topic_id` int(12) NOT NULL,
  `ts` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `topic_id` (`topic_id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=27 ;`
Your query showing all comments and replies would be something like:

SELECT c.id, c.comment, r.comment as reply, c.user_id, u.username, u.photo
FROM (comments c)
JOIN users u ON c.user_id = u.id
LEFT JOIN comments r ON c.id = r.parent_comment_id
WHERE c.topic_id = 9
Note however that with this query your replies would also show up not only in the 'reply' column, but also in the 'comment' column as additional rows each with zero or more replies.

To show the username of the users who replied to a comment, you will need to join twice to the users table (first for the user who posted the original comment, and again for the user(s) who replied). Try this query to show the usernames of the users who replied:

SELECT c.id, c.comment, c.user_id, u.username, u.photo, r.comment as reply, r.user_id as reply_user_id,
u2.username as reply_username, u2.photo as reply_photo
FROM (comment c)
JOIN users u ON c.user_id = u.id
LEFT JOIN comments r ON c.id = r.parent_comment_id
JOIN users u2 ON r.user_id = u2.id
WHERE c.topic_id = 9

//------------------------------------------------------------------------------
public class GridResponse<T> { // TODO replace R by T and T by R

    public List<T> rows;
    public Total total = new Total();

    public GridResponse(List<T> rows, Total total) {
        this.rows = rows;
        this.total = total;
    }

    public <R> GridResponse(List<R> rows, Function<R, T> mapper, Total total) {
        this.rows = rows.stream()
            .map(mapper)
            .collect(toList());

        this.total = total;
    }

    public <R> GridResponse(List<R> rows, Function<R, T> mapper, Total total, List<DomesticTransferService.DocRow> listId) {
        this.rows = rows.stream()
            .map(mapper)
            .collect(toList());

        this.total = total;
    }

    public GridResponse(List<T> rows, long total) {
        this.rows = rows;
        this.total = new Total(total);
    }

    public static class Total {
        public Long count;

        public Total() {
        }

        public Total(final Long count) {
            this.count = count;
        }

        public Total(final int count) {
            this.count = (long) count;
        }
    }

    public GridResponse() {
    }
}